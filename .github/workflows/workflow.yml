name: CI/CD with Terraform
on:
  push:
    branches:
      - main
env:
  AWS_ACCESS_KEY_ID : ${{ secrets.AWS_ACCESS_KEY_ID }}
  AWS_SECRET_ACCESS_KEY_ID : ${{ secrets.AWS_SECRET_ACCESS_KEY_ID }}
  AWS_SSH_KEY_PRIVATE : ${{ secrets.AWS_SSH_KEY_PRIVATE }}
  AWS_SSH_KEY_PUBLIC : ${{ secrets.AWS_SSH_KEY_PUBLIC }}
  AWS_TF_STATE_BUCKET_NAME : ${{ secrets.AWS_TF_STATE_BUCKET_NAME }}
  AWS_REGION : "us-east-2"
  SERVER_PUBLIC_IP:
jobs:
  deploy-infra:
    runs-on: ubuntu-latest
    outputs:
      SERVER_PUBLIC_IP: ${{ steps.set-ip.outputs.instance_public_ip }}
    steps:
      - name: Checkout
        uses: actions/checkout@v2
      
      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v1
        with:
          terraform_wrapper: false
      
      - name: Setting up profile
        run: |-
          mkdir $HOME/.aws
          echo [default] >> $HOME/.aws/credentials
          echo aws_access_key_id = $AWS_ACCESS_KEY_ID >> $HOME/.aws/credentials
          echo aws_secret_access_key = ${AWS_SECRET_ACCESS_KEY_ID} >> $HOME/.aws/credentials
      
      - name: Terraform init
        id: init
        run: terraform init -backend-config="bucket=$AWS_TF_STATE_BUCKET_NAME" -backend-config="region=$AWS_REGION" -backend-config="access_key=$AWS_ACCESS_KEY_ID" -backend-config="secret_key=$AWS_SECRET_ACCESS_KEY_ID"
        working-directory: ./terraform
      
      - name: Terraform plan
        id: plan
        run: |-
          terraform plan \
          -var="region=$AWS_REGION" \
          -var="public_key=$AWS_SSH_KEY_PUBLIC" \
          -var="private_key=$AWS_SSH_KEY_PRIVATE" \
          -var="key_name=deployer-key" \
          -out=PLAN
        working-directory: ./terraform
      
      - name: Terraform Apply
        id: apply
        run: terraform apply PLAN
        working-directory: ./terraform
      
      - name: Set output
        id: set-ip
        run: |-
           echo "::set-output name=instance_public_ip::$(terraform output instance_public_ip)"
        working-directory: ./terraform   
  deploy-app:
    runs-on: ubuntu-latest
    needs: deploy-infra
    steps:
      - name: Checkout
        uses: actions/checkout@v3
      
      - name: Set IP environment variable
        run: echo SERVER_PUBLIC_IP=${{ needs.deploy-infra.outputs.SERVER_PUBLIC_IP }} >> $GITHUB.ENV
      
      - name: Setting up profile
        run: |-
          mkdir $HOME/.aws
          echo [default] >> $HOME/.aws/credentials
          echo aws_access_key_id=$AWS_ACCESS_KEY_ID >> $HOME/.aws/credentials
          echo aws_secret_access_key=${AWS_SECRET_ACCESS_KEY_ID} >> $HOME/.aws/credentials  
      
      - name: Login to AWS ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1
      
      - name: Build a Docker image    
        id: build        
        env:
          REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          REPOSITORY: simple-node-app
          IMAGE_TAG: ${{ github.sha }}
        run: |-
          docker build -t $REGISTRY/$REPOSITORY:$IMAGE_TAG .
          docker image ls
          echo ::set-output name=exit_code::$?
        working-directory: ./nodeapp  
      
      - name: Docker push image to ECR 
        if: steps.build.outputs.exit_code == 0
        env:
          REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          REPOSITORY: simple-node-app
          IMAGE_TAG: ${{ github.sha }}   
        run: docker push $REGISTRY/$REPOSITORY:$IMAGE_TAG
        working-directory: ./nodeapp  
      
      - name: Display public IP of EC2 instance
        run:  |-
          echo ${{ env.SERVER_PUBLIC_IP }}
      
      - name: Deploy Docker image to EC2
        env:
          REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          REPOSITORY: simple-node-app
          IMAGE_TAG: ${{ github.sha }}
          AWS_DEFAULT_REGION: us-east-2
        uses: appleboy/ssh-action@master    
        with:
          host: ${{ env.SERVER_PUBLIC_IP }}
          username: ubuntu
          key: ${{ env.AWS_SSH_KEY_PRIVATE }}
          envs: AWS_SSH_KEY_PRIVATE, REGISTRY, REPOSITORY, IMAGE_TAG, AWS_DEFAULT_REGION, AWS_ACCESS_KEY_ID, AWS_SECRET_ACCESS_KEY_ID, AWS_REGION, SERVER_PUBLIC_IP
          script: |-
            sudo apt update
            sudo apt install docker.io -y
            sudo apt install awscli -y
            sudo $(aws ecr get-login --no-include-email --region $AWS_REGION);
            sudo docker stop myappcontainer || true
            sudo docker rm myappcontainer || true
            sudo docker pull $REGISTRY/$REPOSITORY:$IMAGE_TAG
            sudo docker run -d --name myappcontainer -p 80:8080 $REGISTRY/$REPOSITORY:$IMAGE_TAG
